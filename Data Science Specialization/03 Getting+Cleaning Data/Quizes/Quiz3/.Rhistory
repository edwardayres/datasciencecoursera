q()
install.packages(c("swirl", "httr", "RCurl", "yaml", "bitops", "mime", "testthat", "crayon"))
install.packages(c("jsonlite", "memoise", "biganalytics"))
install.packages("bigmemory")
install.packages("bigmemory.sri")
install.packages(c("manipulate", "geoR"))
install.packages("ggplot2")
install.packages("dplyr")
install.packages("biganalytics")
install.packages("bigmemory")
install.packages(c("knitr", "kfigr", "stringr", "dplyr"))
install.packages("biganalytics")
?gbm
??gbm
?rpart
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
install.packages(xlsx)
install.package(xlsx)
install.packages(xlsx)
install.packages("xlsx")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
names(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[4]]
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[3]]
rootNode[[1]][[9]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xmlSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
?XML
??XML
install.packages("jsonlite")
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
installed.packages("biocLite")
library("biocLite")
biocLite("rhdf5")
library(rhdf5)
library(httr)
setwd("C:/Users/eayres/Documents/Data Science Specialization/03 Getting+Cleaning Data/Quizes/Quiz3")
setwd("C:/Users/eayres/Documents/Data Science Specialization/03 Getting+Cleaning Data/Quizes/Quiz3")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="fsspid.csv", mode="w")
dateDownloaded <- date()
print(dateDownloaded)
library(data.table)
data <- fread(input="fsspid.csv", sep=",")
View(data)
sort <- data[data$ACR = 3 & data$AGS = 6, ]
sort <- data[data$ACR == 3 & data$AGS == 6, ]
View(sort)
?if
??if
data$agricultureLogical <- if(data$ACR == 3 & data$AGS == 6, TRUE)else(FALSE)
data$agricultureLogical <- if(data$ACR == 3 & data$AGS == 6){TRUE}else(FALSE)
ifelse( data$ACR == 3 & data$AGS == 6, 'TRUE' , 'FALSU' ) )
data <- transform(data, c= ifelse( data$ACR == 3 & data$AGS == 6, 'TRUE' , 'FALSU' ) )
View(data)
data <- transform(data, agricultureLogical = ifelse( data$ACR == 3 & data$AGS == 6, 'TRUE' , 'FALSU' ) )
names(data)
View(data)
View(sort)
data$agricultureLogical
which(agricultureLogical == TRUE)
which(data$agricultureLogical == TRUE)
setwd("C:/Users/eayres/Documents/Data Science Specialization/03 Getting+Cleaning Data/Quizes/Quiz3")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile="jeff.jpg", mode="w")
dateDownloaded <- date()
print(dateDownloaded)
download.jpg(fileUrl, destfile="jeff.jpg", mode="w")
library(jpeg)
install.packages(jpeg)
install.packages("jpeg")
(
library("jpeg")
)fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
library("jpeg")
library("jpeg")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.jpg(fileUrl, destfile="jeff.jpg", mode="w")
readJPEG(fileUrl, destfile="jeff.jpg", mode="w")
readJPEG(fileUrl)
setwd("C:/Users/eayres/Documents/Data Science Specialization/03 Getting+Cleaning Data/Quizes/Quiz3")
library("jpeg")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile="jeff.jpg", mode="wb")
dateDownloaded <- date()
print(dateDownloaded)
readJPEG("jeff.jpg")
readJPEG("jeff.jpg", native=TRUE)
photo <- readJPEG("jeff.jpg", native=TRUE)
quintile(photo, c(.30,.80))
quantile(photo, c(.30,.80))
setwd("C:/Users/eayres/Documents/Data Science Specialization/03 Getting+Cleaning Data/Quizes/Quiz3")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile="GDP.csv", mode="w")
dateDownloaded <- date()
download.file(fileUrl, destfile="GDP.csv", mode="w")
dateDownloaded <- date()
print(dateDownloaded)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile="EDSTATS_Country.csv", mode="w")
dateDownloaded <- date()
print(dateDownloaded)
library(data.table)
GDP <- fread(input="GDP.csv", sep=",")
EDstats <- fread(input="EDSTATS_Country.csv", sep=",")
setwd("C:/Users/eayres/Documents/Data Science Specialization/03 Getting+Cleaning Data/Quizes/Quiz3")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile="GDP.csv", mode="wb")
dateDownloaded <- date()
print(dateDownloaded)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile="EDSTATS_Country.csv", mode="wb")
dateDownloaded <- date()
print(dateDownloaded)
library(data.table)
GDP <- fread(input="GDP.csv", sep=",")
EDstats <- fread(input="EDSTATS_Country.csv", sep=",")
View(GDP)
View(EDstats)
library(plyr)
head(GDP)
head(EDstats)
mergedData <- merge(GDP,EDstats,by.x = "V1", by.y = "CountryCode", all=TRUE)
View(mergedData)
mergedData <- merge(GDP,EDstats,by.x = "V1", by.y = "CountryCode", all=FALSE)
View(mergedData)
mergedData[order(mergedData(`Gross domestic product 2012`)]
mergedData[order(mergedData(`Gross domestic product 2012`))]
mergedData[order(mergedData[Gross domestic product 2012])]
mergedData[order(mergedData[,Gross domestic product 2012])]
sor(Gross domestic product 2012)
sort(Gross domestic product 2012)
sort(mergedData$`Gross domestic product 2012`)
sortData <- mergedData[order(,2)]
sortData <- mergedData[order(`Gross domestic product 2012`)]
View(sortData)
sortData <- mergedData[order(-`Gross domestic product 2012`)]
View(sortData)
setwd("C:/Users/eayres/Documents/Data Science Specialization/03 Getting+Cleaning Data/Quizes/Quiz3")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile="GDP.csv", mode="wb")
dateDownloaded <- date()
print(dateDownloaded)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile="EDSTATS_Country.csv", mode="wb")
dateDownloaded <- date()
print(dateDownloaded)
library(data.table)
GDP <- fread(input="GDP.csv", sep=",")
library(data.table)
GDP <- fread(input="GDP.csv", sep=",")
EDstats <- fread(input="EDSTATS_Country.csv", sep=",")
head(GDP)
head(EDstats)
mergedData <- merge(GDP,EDstats,by.x = "V1", by.y = "CountryCode", all=FALSE)
View(mergedData)
sprintf("%06d", mergedData$`Gross domestic product 2012`)
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
mergedData$`Gross domestic product 2012` = as.numeric(as.character(mergedData$`Gross domestic product 2012`))
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
View(GDP)
GDPclean <- GDP[5:194,]
GDPclean <- GDP[5:194,]
EDstats <- fread(input="EDSTATS_Country.csv", sep=",")
head(GDPclean)
head(EDstats)
mergedData <- merge(GDPclean,EDstats,by.x = "V1", by.y = "CountryCode", all=FALSE)
mergedData$`Gross domestic product 2012` = as.numeric(as.character(mergedData$`Gross domestic product 2012`))
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
View(mergedData)
sortData <- mergedData[order(-`Gross domestic product 2012`)]
View(sortData)
SUBsortData <- sortData$`Income Group` = "High income: OECD" | sortData$`Income Group` = "High income: nonOECD"
SUBsortData <- sortData$`Income Group` = "High income: OECD" | "High income: nonOECD"
View(GDP)
View(EDstats)
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
SUBsortData <- table(sortData$`Income Group` %in% c("High income: OECD", "High income: nonOECD"))
SUBsortData
sortData[sortData$`Income Group` %in% c("High income: OECD", "High income: nonOECD")]
x <- sortData[sortData$`Income Group` %in% c("High income: OECD", "High income: nonOECD")]
View(x)
summary(x)
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
summary(x[x$Income.Group=="High income: OECD",])
summary(x)
summary(x$V5)
View(mergedData)
mergedData$v5 = as.numeric(as.character(mergedData$v5))
x <- sortData[sortData$`Income Group` %in% c("High income: OECD")]
y <- sortData[sortData$`Income Group` %in% c("High income: nonOECD")]
View(x)
x$V5
as.numeric(x$V5)
summary(x$V5)
x$`Income Group` <- as.numeric(x$`Income Group`)
x$`Income Group`
x$`Income Group` <- as.numeric(as.character(x$`Income Group`)
)
x$`Income Group`
x$5 <- as.numeric(as.character(x$5))
x$`Income Group` <- as.numeric(as.character(x$V5))
x <- sortData[sortData$`Income Group` %in% c("High income: OECD")]
y <- sortData[sortData$`Income Group` %in% c("High income: nonOECD")]
View(y)
summary(x$`Gross domestic product 2012`)
summary(y$`Gross domestic product 2012`)
quantile(sortData$`Gross domestic product 2012`,probs = 0.2,0.4,0.6,0.8,1)
quantile(sortData$`Gross domestic product 2012`,probs = c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
install.packages(Hmisc)
library(Hmisc)
mergedData$gdp=cut2(sortData$Gross.domestic.product.2012,g=5)
install.packages(Hmisc)
installed.packages(Hmisc)
install.packages(grid, lattice, survival (â‰¥ 2.37-6), Formula, ggplot2)
install.packages(grid, lattice, survival, Formula, ggplot2)
install.packages(grid, lattice, Formula, ggplot2)
install.packages(grid, lattice, ggplot2)
install.packages(grid, lattice)
install.packages("grid", "lattice")
sortData$QuinGroups = cut(sortData$`Gross domestic product 2012`, breaks=quantile(sortData$`Gross domestic product 2012`))
sortData$QuinGroups
table(sortData$QuinGroups)
table(sortData$`Income Group`,sortData$`Gross domestic product 2012`)
