q()
install.packages(c("swirl", "httr", "RCurl", "yaml", "bitops", "mime", "testthat", "crayon"))
install.packages(c("jsonlite", "memoise", "biganalytics"))
install.packages("bigmemory")
install.packages("bigmemory.sri")
install.packages(c("manipulate", "geoR"))
install.packages("ggplot2")
install.packages("dplyr")
install.packages("biganalytics")
install.packages("bigmemory")
install.packages(c("knitr", "kfigr", "stringr", "dplyr"))
install.packages("biganalytics")
?gbm
??gbm
?rpart
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
install.packages(xlsx)
install.package(xlsx)
install.packages(xlsx)
install.packages("xlsx")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
names(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[4]]
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[3]]
rootNode[[1]][[9]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xmlSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
?XML
??XML
install.packages("jsonlite")
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
installed.packages("biocLite")
library("biocLite")
biocLite("rhdf5")
library(rhdf5)
library(httr)
## Set working directory
setwd("C:/Users/eayres/Documents/Data Science Specialization/03 Getting+Cleaning Data/CourseProject/UCI HAR Dataset/")
## Step 1 -
## Load test data
library(data.table)
subject_test <- fread(input="test/subject_test.txt", sep=",")
X_test <- fread(input="test/X_test.txt", sep=" ")
Y_test <- fread(input="test/Y_test.txt", sep=",")
## Combine test datasets
test <- cbind(subject_test, Y_test, X_test)
## Load training data
subject_train <- fread(input="train/subject_train.txt", sep=",")
X_train <- fread(input="train/X_train.txt", sep=" ")
Y_train <- fread(input="train/Y_train.txt", sep=",")
## Combine training datasets
train <- cbind(subject_train, Y_train, X_train)
## Combine training and test datasets
data <- rbind(test, train)
## Step 2 -
## Read in X column names
Xcol <- fread(input="features.txt", sep=" ")
## Assign column names
colnames(data) <- c("subject", "activity", Xcol$V2)
## Select columns for subject, activity and all mean and std cols
library(dplyr)
data2 <- select(data, contains("subject"), contains("activity"), contains("mean"), contains("std"), -contains("freq"),
-contains("angle"))
## Step 3
Label <- fread(input="activity_labels.txt", sep=" ")
View(Label)
View(data2)
remove(X_train, X_test, Y_train, Y_test)
remove(X_train, X_test, Y_train, Y_test, train, test)
replace(data2$activity, data2$activity==1, WALKING)
replace(data2$activity, data2$activity==1, "WALKING")
View(data2)
with(data2(data2$activity), replace(data2$activity, data2$activity == 1, "WALKING"))
with(data2(activity), replace(data2$activity, data2$activity == 1, "WALKING"))
with(data2(activity), replace(activity, activity == 1, "WALKING"))
with(data2$activity), replace(activity, activity == 1, "WALKING")
data2$activity[which(data2$activity == 1)] <- 'Walking'
data2$activity[which(data2$activity == 2)] <- 'Walking upstairs'
data2$activity[which(data2$activity == 3)] <- 'Walking downstairs'
data2$activity[which(data2$activity == 4)] <- 'Sitting'
data2$activity[which(data2$activity == 5)] <- 'Standing'
data2$activity[which(data2$activity == 6)] <- 'Laying'
